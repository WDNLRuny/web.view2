import inet.url;
import util.metaProperty;
import util.registry;
import web.json;
import win.reg;
import wsock;
import sys.locale;


namespace web;

class view2{
	ctor(winform,userDataFolder,browserExecutableFolder,environmentOptions){
		
		if(!userDataFolder){
			userDataFolder = ..io.appData("/aview/user-data/");
		}
		
		this.userDataFolder = ..io.fullpath(userDataFolder);
		this.browserExecutableFolder = ..io.fullpath(browserExecutableFolder);
		this.environmentOptions = type(environmentOptions) == type.table ?  ..web.json.stringify(environmentOptions): environmentOptions;
		winform.onEraseBkgnd  = lambda() 0; 
		
		var browser = _dll.webview_createW(winform.hwnd,this.userDataFolder,this.browserExecutableFolder,this.environmentOptions);
		
		this.browser = browser;
		
		if(!this.browser) return;
		
		this._jsCallback = {};
		this.export = function(name,callback){
			if(!this.browser) return;
			if(type(name)==="table"){
				for k,v in ..table.eachName(name){ 
					if(type(v)==="function"){
						this.export(k,v);
					}
				}
				
				return;
			}
			
			if(type(name)!=="string") error("参数@1必须是字符串",2);
			if((type(callback)!=="function")&&(type(callback)!=="class") ) error("参数@2必须是函数",2);
			
			this._jsCallback[name] = ..raw.tocdecl(function(seq,req,arg){
				var ok,ret;
				
				if(req){
					req = ..web.json.parse(req);
					ok,ret = call(callback,this,..table.unpackArgs(req))	
				}
				else {
					ok,ret = call(callback,this)		
				}
				
				if(!ok){
					if(ret) errput(ret); 
					_dll.webview_do_script(this.browser,"window._rpc[" + seq + "].reject(" + ..web.json.stringify(ret) + "); window._rpc[" +  seq + "] = undefined",null);
					return;
				}
				
				if(ret!==null){  
					_dll.webview_do_script(this.browser,"window._rpc[" + seq + "].resolve(" + ..web.json.stringify(ret) + "); window._rpc[" +  seq + "] = undefined",null);
				}
			}
			,"void(string seq,string req,ptr arg)")
			
			_dll.webview_bind(this.browser,name,this._jsCallback[name],null); 
		};
		
		if(!winform.wait( function(){
			if(browser && _dll.webview_ready(browser)){ 
				this._jsEvalCallback = ..util.registry();
				this.export(
					$aardioEvalCallback = function(result,err,callbackId){
						var cb = this._jsEvalCallback.unReg(callbackId);
						if(cb){ cb(result,err); }
					};
					$aardioDocumentLoad = function(url){
						var r = this._jsEvalCallback;
						for(i,cb in r){
							if(type(i)=="number") {
								cb(null,"DOCUMENT_CLOSED");
								r[i] = null;
							}
						}
						
						this.$readyUrl = url;
						if(this.onDocumentInit)this.onDocumentInit(url);
					};
				);
				
				_dll.webview_setSizeFull(browser);
				_dll.webview_init(browser,"
				window.external={invoke:s=>window.chrome.webview.postMessage(s)};
				window.external.waitEle = function(selector, timeout, frequency){return new Promise((resolve, reject) => {var b = Date.now();(function retry() {let el = document.querySelector(selector);if (el != null) { resolve(el);}else {setTimeout(function () {let ms;if (timeout && (ms = Date.now() - b) > timeout) { reject('Promise timed out after ' + ms + ' ms');  }else{  retry();} }, frequency || 200);}})();})};
				if(top==self)$aardioDocumentLoad(location.href);")
				return true;
			}
		},,300)) return;
		
		
		winform._onDestroy = function(){
			if(this.browser){
				_dll.webview_destroy(this.browser);	
				this.browser = null;
				browser = null;
			}
		}
		
		winform.adjust = function( cx,cy,wParam ) {	 
			_dll.webview_setSizeFull(this.browser);
		};
		
		this._form = winform;
		this.hwndChrome = ..win.getChild(winform.hwnd);
	
	};
	
	go = function(url,await = false){
		if(!this.browser) return;
		
		if(!await){
			this.$readyUrl = null;
			_dll.webview_navigate(this.browser, url); 
			
			this._form.wait(function(){
				return this.$readyUrl;
			});
		}else{
			_dll.webview_navigate(this.browser, url);
		}
		
	};
	
	preloadScript = function(js){
		if(!this.browser) return; 
		_dll.webview_init(this.browser,"(function(){"+js+"})()")
	};
	
	doScript = function(...){
		return this.executeScript(...);
	};
	
	eval = function(js,...){
		if(!this.browser) return;  
		if(...) js = ..string.format(js,...);
		
		var done;
		var result;
		var callback = ..raw.tocdecl(function(err,json){
			if(!err){
				result = jsonTryParse(json);
				done = true;
			}
			else {
				done = false;
			}
		},"void(int errCode,ustring json)")
		
		_dll.webview_do_script(this.browser,"("+js+")",callback) 
		..win.wait(lambda() done,winform.hwnd,,5);
		 
		..raw._release(callback);
		return result;
	};
	xcall = function(method,...){
		var jsThis = "null";
		if(!..string.find(method,"[\r\n\;\{\}\(\)]")){
			jsThis = ..string.match(method,"(.+)\.[^.]+$") : "null";
		}
		
		var js  = "(" + method + ").apply(" + jsThis + "," + ..web.json.stringifyArray({...}) + ")";
		return this.eval(js);
	};
	invoke = function(method,...){
		var jsThis = "null";
		if(!..string.find(method,"[\r\n\;\{\}\(\)]")){
			jsThis = ..string.match(method,"(.+)\.[^.]+$") : "null";
		}
		
		var js  = "(" + method + ").apply(" + jsThis + "," + ..web.json.stringifyArray({...}) + ")";
		_dll.webview_do_script(this.browser,js,null)
	};
	
	waitEle = function(selector,callback,timeout){
		if(!this.browser) return; 
		
		if(type.isString(callback)){
			_dll.webview_do_script(this.browser,"external.waitEle('"+selector+"',"+(timeout:0)+").then( (el)=>{ ((function(){"+callback+'\n}).bind(el))() } )',null) 
		}
		elseif(callback){
			var callbackId = this._jsEvalCallback.reg(callback); 
			_dll.webview_do_script(this.browser,"external.waitEle('"+selector+"',"+(timeout:0)+").then( ()=>{ window.$aardioEvalCallback('"+selector+"',null,"+callbackId+")} ).catch( (e)=>{ window.$aardioEvalCallback(null,e,"+callbackId+")} )",null) 
		}
		else {
			var url = this.$readyUrl;
			var resultOk,resultErr;
			this.waitEle(selector,function(ok,err){
				resultOk,resultErr = ok,err;
			},timeout)
			
			return this._form.wait(function(){
				if(this.$readyUrl!=url) return null,"页面已跳转";
				return resultOk,resultErr;
			},,timeout); 
		} 
	};
	
	wait = function(p,timeout){ 
		return this._form.wait(function(){
			var url = this.$readyUrl; 
			if( url ? ..string.find( url,p) ) return true; 
		},timeout);
	}; 
	
	cdp = function(...){
		return this.callDevToolsProtocolMethod(...)
	};
	cdpWait = function(name,param,timeout){
		return this._form.wait(function(){
			return this.cdp(name,param)
		},,timeout); 
	};
	cdpQuery = function(selector,parent){
		if(!parent){
			parent = this.cdp("DOM.getDocument")[["root"]];
			if(!parent) return;
		}
		
 		return this.cdp("DOM.querySelector",{
			selector = selector;
			nodeId = parent[["nodeId"]] : parent;
		})
	};
	cdpWaitQuery = function(selector,parent,timeout){
		return this._form.wait(function(){
			return this.cdpQuery(selector,parent)
		},,timeout); 
	};
	exportHostObject = function(...){
		return this.addHostObjectToScript(...);
	}
	
	
	
	
	
	
	executeScript = function(js,callback,cbOwner){
		if(!this.browser) return;
			
		if(type(callback)=="function"){
			this._jsCallback[callback] = ..raw.tocdecl(function(err,json){
				if(!err){
					var r,e = call(callback,cbOwner,jsonTryParse(json));
					if(!r){ errput(e:"ExecuteScript failed","WebView") }
				}
				else {
					errput("ExecuteScript failed","WebView")
				}
				
				this._jsCallback[callback] = null;
			},"void(int errCode,ustring json)")
			
			return _dll.webview_executeScript(this.browser,js,this._jsCallback[callback])
				
		}
		
		return _dll.webview_executeScript(this.browser,"(function(){"+js+'\n})()',null)
	};
	
	addDocumentTitleChanged = function(callback){
		var callBack = ..raw.tostdcall(callback,"void(ustring)");
		var token = _dll.webview_addDocumentTitleChanged(this.browser,callBack);
		this._jsCallback[token] = callBack;
		return token;
	};
	
	removeDocumentTitleChanged = function(token){
		_dll.webview_removeDocumentTitleChanged(this.browser,token);
		this._jsCallback[token] = null;
	};
	
	
	
	addContainsFullScreenElementChanged = function(callback){
		var callBack = ..raw.tostdcall(callback,"void(bool)",this);
		var token = _dll.webview_addContainsFullScreenElementChanged(this.browser,callBack);
		this._jsCallback[token] = callBack;
		return token;
	}
	
	removeContainsFullScreenElementChanged = function(token){
		_dll.webview_removeContainsFullScreenElementChanged(this.browser,token);
		this._jsCallback[token] = null;
	};
	
	addHostObjectToScript = function(name,object){
		if(!this.browser) return;
		
		var t = type(object);
		if(!..com.IsObject(object) ){
			if( t==type.table || t == type.function ){
				object = ..com.ImplInterface(object);
			}	
		} 
			
		var v = ..com.Variant(object);
		_dll.webview_addHostObjectToScript(this.browser,name,v);
		..com.Release(v);
	};
	
	removeHostObjectFromScript = function(name){
		_dll.webview_removeHostObjectFromScript(this.browser,name);
	};
	
	getDocumentTitle = function(){
		return _dll.api("webview_getDocumentTitle","ustring(auto)","cdecl")(this.browser);
	};
	
	addNavigationStarting = function(callback){
		var callBack = ..raw.tostdcall(callback,"bool(ustring)",this);
		var token = _dll.webview_addNavigationStarting(this.browser,callBack);
		this._jsCallback[token] = callBack;
		return token;
	}
	removeNavigationStarting = function(token){
		_dll.webview_removeNavigationStarting(this.browser,token);
		this._jsCallback[token] = null;
	};
	
	addNewWindowRequested = function(callback){
		var callBack = ..raw.tostdcall(callback,"bool(ustring)",this);
		var token = _dll.webview_addNewWindowRequested(this.browser,callBack);
		this._jsCallback[token] = callBack;
		return token;
	}
	
	removeNewWindowRequested = function(token){
		_dll.webview_removeNewWindowRequested(this.browser,token);
		this._jsCallback[token] = null;
	};
	
	addPermissionRequested = function(callback){
		var fun = function(args){
			return callback(..web.json.parse(args));
		}
		var callBack = ..raw.tostdcall(fun,"bool(string)",this);
		var token = _dll.webview_addPermissionRequested(this.browser,callBack);
		this._jsCallback[token] = callBack;
		return token;
	}
	
	removePermissionRequested = function(token){
		_dll.webview_removePermissionRequested(this.browser,token);
		this._jsCallback[token] = null;
	};
	
	goBack = function(){
		return _dll.webview_goBack(this.browser);
	};
	
	goForward = function(){
		return _dll.webview_goForward(this.browser);
	};
	
	navigate = function(uri){
		_dll.webview_navigate(this.browser,uri);
	};
	
	navigateToString = function(html){
		_dll.webview_navigateToString(this.browser,html);
	};
	
	openDevToolsWindow = function(){
		_dll.webview_openDevToolsWindow(this.browser);
	}
	
	reload = function(){
		_dll.webview_reload(this.browser);
	}
	
	openDefaultDownloadDialog = function(){
		_dll.webview_openDefaultDownloadDialog(this.browser);
	}
	
	closeDefaultDownloadDialog = function(){
		_dll.webview_closeDefaultDownloadDialog(this.browser);
	}
	
	addDownloadStarting = function(callback){
		var fun = function(args){
			var p = ..web.json.parse(args);
			p.downloadOperation = downloadOperation(p.downloadOperation);
			var res = callback(p);
			return res ? ..web.json.stringify(res) : null;
		}
		
		var callBack = ..raw.tostdcall(fun,"string(string)",this);
		var token = _dll.webview_addDownloadStarting(this.browser,callBack);
		this._jsCallback[token] = callBack;
		return token;
	}
	
	removeDownloadStarting = function(token){
		_dll.webview_removeDownloadStarting(this.browser,token);
		this._jsCallback[token] = null;
	};
	
	print = function(printSettings,callback){
		if(printSettings) printSettings = ..web.json.stringify(printSettings);
		var callBack = ..raw.tostdcall(callback,"void(int,int)",this);
		_dll.webview_print(this.browser,printSettings,callBack);
	}
	
	showPrintUI = function(printDialogKind){
		_dll.webview_showPrintUI(this.browser,printDialogKind);
	}
	
	addFaviconChanged = function(callback){
		var callBack = ..raw.tostdcall(callback,"void(ustring)",this);
		var token = _dll.webview_addFaviconChanged(this.browser,callBack);
		this._jsCallback[token] = callBack;
		return token;
	}
	
	removeFaviconChanged = function(token){
		_dll.webview_removeFaviconChanged(this.browser,token);
		this._jsCallback[token] = null;
	};
	
	callDevToolsProtocolMethod = function(name,param,callback){
		if(!this.browser) return;  
		if(!type.isString(param)) param = param?..web.json.stringify(param):"{}";
	
		var done;
		var result;
		var callBack = ..raw.tocdecl(function(err,json){
			if(!err){
				result = jsonTryParse(json);
				if(callback){
					callback(result);
				}
				done = true;
			}
			else {
				done = false;
			}
		},"void(int errCode,ustring json)")
		
		_dll.webview_callDevToolsProtocolMethod(this.browser,name,param,callBack);
		if(!callback){
			..win.wait(lambda() done,winform.hwnd,,5);
			..raw._release(callBack);
		}
		
		if(done) return result;
	};
	
	clearBrowsingData = function(dataKinds,callback){
		var callBack = ..raw.tocdecl(callback,"void(int)");
		_dll.webview_clearBrowsingData(this.browser,dataKinds,callBack) 
	};
	
	clearBrowsingDataAll = function(callback){
		var callBack = ..raw.tocdecl(callback,"void(int)");
		_dll.webview_clearBrowsingDataAll(this.browser,callBack) 
	};
	
	clearBrowsingDataInTimeRange = function(dataKinds,startTime, endTime,callback){
		var callBack = ..raw.tocdecl(callback,"void(int)");
		_dll.api("webview_clearBrowsingDataInTimeRange","void(auto,int,double,double,auto)","cdecl")(this.browser,dataKinds,startTime, endTime,tonumber(callBack));
	};
	
	addIsDocumentPlayingAudioChanged = function(callback){
		var callBack = ..raw.tostdcall(callback,"void(int,int)",this);
		var token = _dll.webview_addIsDocumentPlayingAudioChanged(this.browser,callBack);
		this._jsCallback[token] = callBack;
		return token;
	}
	
	removeIsDocumentPlayingAudioChanged = function(token){
		_dll.webview_removeIsDocumentPlayingAudioChanged(this.browser,token);
		this._jsCallback[token] = null;
	};
	
	addIsMutedChanged = function(callback){
		var callBack = ..raw.tostdcall(callback,"void(int,int)",this);
		var token = _dll.webview_addIsMutedChanged(this.browser,callBack);
		this._jsCallback[token] = callBack;
		return token;
	}
	
	removeIsMutedChanged = function(token){
		_dll.webview_removeIsMutedChanged(this.browser,token);
		this._jsCallback[token] = null;
	};
	
	getIsDocumentPlayingAudio = function(){
		return _dll.webview_getIsDocumentPlayingAudio(this.browser);
	};
	
	notifyParentWindowPositionChanged = function(){
		return _dll.webview_notifyParentWindowPositionChanged(this.browser);
	};
	
	addWebResourceRequestedFilter = function(uri, resourceContext){
		_dll.webview_addWebResourceRequestedFilter(this.browser,uri, resourceContext);
	}
	
	removeWebResourceRequestedFilter = function(uri, resourceContext){
		_dll.webview_removeWebResourceRequestedFilter(this.browser,uri, resourceContext);
	}
	
	addWebResourceRequested = function(callback){
		var callBack = ..raw.tostdcall(function(json){
			var res = callback(..web.json.tryParse(json));
			return res ? ..web.json.stringify(res) : null;
		},"string(string)",this)
		var token = _dll.webview_addWebResourceRequested(this.browser,callBack);
		this._jsCallback[token] = callBack;
		return token;
	}
	
	removeWebResourceRequested = function(token){
		_dll.webview_removeWebResourceRequested(this.browser,token);
		this._jsCallback[token] = null;
	};
	
	@_metaProperty;
}

namespace view2{
	_metaProperty = ..util.metaProperty(
	
		focus = function(){
			..win.setFocus( owner.hwndChrome );
		};
		
		areDefaultContextMenusEnabled = {
			_set = function(b){
					_dll.webview_putAreDefaultContextMenusEnabled(owner.browser,b)
				}
			_get = function(){
				return _dll.webview_getAreDefaultContextMenusEnabled(owner.browser);
			}	
		}
		
		areDevToolsEnabled = {
			_set = function(b){
					_dll.webview_putAreDevToolsEnabled(owner.browser,b)
				}
			_get = function(){
				return _dll.webview_getAreDevToolsEnabled(owner.browser);
			}	
		}
		
		areHostObjectsAllowed = {
			_set = function(b){
					_dll.webview_putAreHostObjectsAllowed(owner.browser,b)
				}
			_get = function(){
				return _dll.webview_getAreHostObjectsAllowed(owner.browser);
			}	
		}
		
		isBuiltInErrorPageEnabled = {
			_set = function(b){
					_dll.webview_putIsBuiltInErrorPageEnabled(owner.browser,b)
				}
			_get = function(){
				return _dll.webview_getIsBuiltInErrorPageEnabled(owner.browser);
			}	
		}
		
		isStatusBarEnabled = {
			_set = function(b){
					_dll.webview_putIsStatusBarEnabled(owner.browser,b)
				}
			_get = function(){
				return _dll.webview_getIsStatusBarEnabled(owner.browser);
			}	
		}
		
		isZoomControlEnabled = {
			_set = function(b){
					_dll.webview_putIsZoomControlEnabled(owner.browser,b)
				}
			_get = function(){
				return _dll.webview_getIsZoomControlEnabled(owner.browser);
			}	
		}
		userAgent = {
			_set = function(b){
					_dll.webview_putUserAgent(owner.browser,b)
				}
			_get = function(){
				return _dll.api("webview_getUserAgent","ustring(auto)","cdecl")(owner.browser);
			}	
		}
		
		areBrowserAcceleratorKeysEnabled = {
			_set = function(b){
					_dll.webview_putAreBrowserAcceleratorKeysEnabled(owner.browser,b)
				}
			_get = function(){
				return _dll.webview_getAreBrowserAcceleratorKeysEnabled(owner.browser);
			}	
		}
		
		defaultDownloadFolderPath = {
			_set = function(b){
					_dll.webview_putDefaultDownloadFolderPath(owner.browser,b)
				}
			_get = function(){
				return _dll.api("webview_getDefaultDownloadFolderPath","ustring(auto)","cdecl")(owner.browser);
			}	
		}
		
		preferredColorScheme = {
			_set = function(b){
					_dll.webview_putPreferredColorScheme(owner.browser,b)
				}
			_get = function(){
				return _dll.webview_getPreferredColorScheme(owner.browser);
			}	
		}
		defaultBackgroundColor = {
			_set = function(b){
					_dll.webview_putDefaultBackgroundColor(owner.browser,b>> 16 & 0xFF, b>> 8  & 0xFF,b & 0xFF,b >> 24 & 0xFF);
				}
			_get = function(){
				return _dll.webview_getDefaultBackgroundColor(owner.browser);
			}	
		}
		
		shouldDetectMonitorScaleChanges = {
			_set = function(b){
					_dll.webview_putShouldDetectMonitorScaleChanges(owner.browser,b);
				}
			_get = function(){
				return _dll.webview_getShouldDetectMonitorScaleChanges(owner.browser);
			}	
		}
		
		isMuted = {
			_set = function(b){
					_dll.webview_putIsMuted(owner.browser,b);
				}
			_get = function(){
				return _dll.webview_getIsMuted(owner.browser);
			}	
		}
	)
	
	class downloadOperation{
		ctor(pointer){
			if(!pointer){
				return ; 
			}
			this.pointer = pointer;
			this._jsCallback = {};
		};
		
		addBytesReceivedChanged = function(callback){
			..console.log(this.pointer,callback)
			var callBack = ..raw.tostdcall(callback,"void()",this);
			var token = ..web.view2._dll.webview_downloadOperation_addBytesReceivedChanged(this.pointer,callBack);
			this._jsCallback[token] = callBack;
			return token;
		}
		
		addEstimatedEndTimeChanged = function(callback){
			var callBack = ..raw.tostdcall(callback,"void()",this);
			var token = ..web.view2._dll.webview_downloadOperation_addEstimatedEndTimeChanged(this.pointer,callBack);
			this._jsCallback[token] = callBack;
			return token;
		}
		
		addStateChanged = function(callback){
			var callBack = ..raw.tostdcall(callback,"void()",this);
			var token = ..web.view2._dll.webview_downloadOperation_addStateChanged(this.pointer,callBack);
			this._jsCallback[token] = callBack;
			return token;
		}
		
		
		
		getBytesReceived = function(){
			return ..web.view2._dll.webview_downloadOperation_getBytesReceivedL(this.pointer);
		}
		
		getCanResume = function(){
			return ..web.view2._dll.webview_downloadOperation_getCanResumeB(this.pointer);
		}
		
		getContentDisposition = function(){
			return ..web.view2._dll.api("webview_downloadOperation_getContentDisposition","ustring(auto)","cdecl")(this.pointer);
		}
		
		getEstimatedEndTime = function(){
			return ..web.view2._dll.api("webview_downloadOperation_getEstimatedEndTime","ustring(auto)","cdecl")(this.pointer);
		}
		
		getInterruptReason = function(){
			return ..web.view2._dll.webview_downloadOperation_getInterruptReason(this.pointer);
		}
		
		getMimeType = function(){
			return ..web.view2._dll.api("webview_downloadOperation_getMimeType","ustring(auto)","cdecl")(this.pointer);
		}
		
		getResultFilePath = function(){
			return ..web.view2._dll.api("webview_downloadOperation_getResultFilePath","ustring(auto)","cdecl")(this.pointer);
		}
		
		getState = function(){
			return ..web.view2._dll.webview_downloadOperation_getState(this.pointer);
		}
		
		getTotalBytesToReceive = function(){
			return ..web.view2._dll.webview_downloadOperation_getTotalBytesToReceiveL(this.pointer);
		}
		
		getUri = function(){
			return ..web.view2._dll.api("webview_downloadOperation_getUri","ustring(auto)","cdecl")(this.pointer);
		}
		
		cancel = function(){
			return ..web.view2._dll.webview_downloadOperation_cancel(this.pointer);
		}
		
		pause = function(){
			return ..web.view2._dll.webview_downloadOperation_pause(this.pointer);
		}
		
		resume = function(){
			return ..web.view2._dll.webview_downloadOperation_resume(this.pointer);
		}
		
		removeBytesReceivedChanged = function(token){
			..web.view2._dll.webview_downloadOperation_removeBytesReceivedChanged(this.pointer,token);
			this._jsCallback[token] = null;
		};
		
		removeEstimatedEndTimeChanged = function(token){
			..web.view2._dll.webview_downloadOperation_removeEstimatedEndTimeChanged(this.pointer,token);
			this._jsCallback[token] = null;
		};
		
		removeStateChanged = function(token){
			..web.view2._dll.webview_downloadOperation_removeStateChanged(this.pointer,token);
			this._jsCallback[token] = null;
		};
	}
	
	
	//https://docs.microsoft.com/en-us/microsoft-edge/webview2/concepts/distribution#understand-the-webview2-runtime-and-installer-preview
	getRuntimeInfo = function(path){
		
		if(!path){
			return getRuntimeInfo("HKEY_LOCAL_MACHINE\SOFTWARE\Microsoft\EdgeUpdate\Clients\{F3017226-FE2A-4295-8BDF-00C3A9A7E4C5}")
				|| getRuntimeInfo("HKEY_CURRENT_USER\Software\Microsoft\EdgeUpdate\Clients\{F3017226-FE2A-4295-8BDF-00C3A9A7E4C5}")
		}
								
		var reg = ..win.reg(path);
		if(reg){
			var location = reg.queryValue("location")
			var version = reg.queryValue("pv")
			reg.close();
			
			if(#location && #version && ..string.find(version,"[^0\.]") ){
				return { location = location; version = version; }	
			} 
		}	
	}
	
	checkRuntime = function(winform){
		if(getRuntimeInfo()) return true;
		return installRuntime(winform);
	}
	
	installRuntime = function(winform){
		if(!_WIN7_LATER){ return; }
		
		//https://developer.microsoft.com/zh-cn/microsoft-edge/webview2/#download-section
		import inet.installer;
		
		if(_WIN10_LATER){
			if( inet.installer.asInvoker("WebView2 Runtime"
				,"https://go.microsoft.com/fwlink/?linkid=" +( _WIN_64 ? "2124701" : "2099617")
				," /silent /install",,winform
			) ){
				return !!getRuntimeInfo();
			} 		
		}
		else {
			if(!winform)winform = ..win.getActive();
			
			var downBox = ..inet.downBox(winform,"正在下载程序运行必需组件：WebView2 Runtime",100) 
			var savePath = downBox.download("https://go.microsoft.com/fwlink/p/?LinkId=2124703",..io.appData("aardio/inet/installer/"));
			if(savePath){
				var prcs,err = ..process.shell(savePath,,"open",,,winform);
					
				if(prcs){  
					prcs.waitOne();
					prcs.free(); 
					
					if(getRuntimeInfo()){
						::Kernel32.MoveFileEx(savePath,null,0x4/*_MOVEFILE_DELAY_UNTIL_REBOOT*/); 
						return true; 
					} 
				}
			}
		}
	}
	
	jsonTryParse = ..web.json.tryParse;
	
	if(!_WIN7_LATER) return;
	
	/*
	感谢：
	https://github.com/webview/webview/blob/master/webview.h
	https://github.com/MicrosoftEdge/WebView2Browser
	*/
	_dll = ..raw.loadDll( $"~\webview2\Release\WEBVIEW2.dll",,"cdecl");
	
	
	
}